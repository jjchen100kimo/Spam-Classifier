# -*- coding: utf-8 -*-
"""Py3_HW6_20230415_Spam Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ORoCOSh_L4gqxBbZFSrdn3UOVRWvFKbf
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
url = 'https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv'
sms = pd.read_table(url, header=None, names=['label', 'message'])
sms

# Convert labels to binary values (0 for ham, 1 for spam)
sms['label'] = np.where(sms['label']=='spam', 1, 0)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(sms['message'], 
                              sms['label'], 
                              random_state=42)

# Create a count vectorizer to convert messages into a matrix of token counts
vectorizer = CountVectorizer()
X_train_counts = vectorizer.fit_transform(X_train)

# Train the Naive Bayes classifier on the training data
clf = MultinomialNB()
clf.fit(X_train_counts, y_train)

# Convert the test messages into a matrix of token counts
X_test_counts = vectorizer.transform(X_test)

# Predict the labels of the test messages
y_pred = clf.predict(X_test_counts)

# Evaluate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

# Print the classification report
report = classification_report(y_test, y_pred)
print('Classification Report:\n', report)

"""#Streamlit"""

# Import necessary libraries
#pip install streamlit
import pandas as pd
import numpy as np
import streamlit as st
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer

# Load the dataset
url = 'https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv'
sms = pd.read_table(url, header=None, names=['label', 'message'])

# Convert labels to binary values 
#(0 for ham, 1 for spam)
sms['label'] = np.where(sms['label']=='spam', 1, 0)

# Train the Naive Bayes classifier on the full dataset
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(sms['message'])
y = sms['label']
clf = MultinomialNB()
clf.fit(X, y)

# Define a function to predict the label of a message
def predict(message):
  message_counts = vectorizer.transform([message])
  return clf.predict(message_counts)[0]

# Create a Streamlit app
st.title('Spam Classifier')
message = st.text_input('Enter a message')
if st.button('Predict'):
  prediction = predict(message)
  if prediction == 1:
    st.error('This is a spam message')
  else:
    st.success('This is a legitimate message')